name: Backend CI (in-memory)

on:
  push:
    paths:
      - 'apps/backend/**'
      - 'prisma/**'
      - 'core/roles/**'
      - 'scripts/seed-roles-from-json.ts'
      - 'scripts/seed-roles-lib.ts'
      - 'scripts/roles-io.ts'
      - '.github/workflows/**'
  pull_request:
    paths:
      - 'apps/backend/**'
      - 'prisma/**'
      - 'core/roles/**'
      - 'scripts/seed-roles-from-json.ts'
      - 'scripts/seed-roles-lib.ts'
      - 'scripts/roles-io.ts'
      - '.github/workflows/**'

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      FF_PERSISTENCE: 'false'
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Cache SWC artifacts
        uses: actions/cache@v4
        with:
          path: node_modules/.cache/swc
          key: ${{ runner.os }}-swc-${{ hashFiles('package-lock.json') }}

      - name: Sanitize npm proxy config (legacy http-proxy)
        shell: bash
        run: scripts/ci/sanitize-npm-proxy.sh

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npm run prisma:generate
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/wb?schema=public

      - name: Backend typecheck
        run: npm run typecheck -w @workbuoy/backend

      - name: Run backend Jest suite
        env:
          ROLES_PATH: ./scripts/fixtures/minimal-roles.json
          FEATURES_PATH: ./scripts/fixtures/minimal-features.json
        run: npm run test -w @workbuoy/backend -- --passWithNoTests --detectOpenHandles

      - name: Build backend deps (targeted)
        env:
          NEXT_TELEMETRY_DISABLED: 1
        run: |
          set -e
          # Bygg kun backend-relaterte workspaces som gir dist-artefakter brukt av apps/backend
          npm run build -w @workbuoy/backend-rbac --if-present
          npm run build -w @workbuoy/backend-metrics --if-present
          npm run build -w @workbuoy/backend-telemetry --if-present
          npm run build -w @workbuoy/backend-auth --if-present

  smoke:
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        chaos: ['0', '1']
    env:
      WB_CHAOS_READY: ${{ matrix.chaos }}
      GIT_SHA: ${{ github.sha }}
      PORT: 3000
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build backend deps (targeted)
        env:
          NEXT_TELEMETRY_DISABLED: 1
        run: |
          set -e
          # Bygg kun backend-relaterte workspaces som gir dist-artefakter brukt av apps/backend
          npm run build -w @workbuoy/backend-rbac --if-present
          npm run build -w @workbuoy/backend-metrics --if-present
          npm run build -w @workbuoy/backend-telemetry --if-present
          npm run build -w @workbuoy/backend-auth --if-present

      - name: Sanity check built dists
        run: |
          ls -la node_modules/@workbuoy/backend-rbac/dist || true
          ls -la node_modules/@workbuoy/backend-metrics/dist || true
          ls -la node_modules/@workbuoy/backend-telemetry/dist || true
          ls -la node_modules/@workbuoy/backend-auth/dist || true

      - name: Start backend (background)
        env:
          PORT: 3000
        run: |
          set -e
          if npm run -w @workbuoy/backend start --silent >/dev/null 2>&1; then
            npm run -w @workbuoy/backend start & echo $! > server.pid
          else
            npx tsx apps/backend/src/index.ts & echo $! > server.pid
          fi
          for _ in $(seq 1 30); do
            if curl -sSf "http://127.0.0.1:${PORT}/api/health" > /dev/null; then
              exit 0
            fi
            sleep 1
          done
          echo "Backend failed to become healthy" >&2
          exit 1

      - name: Probe /api/health
        run: curl -sf "http://127.0.0.1:${PORT}/api/health"

      - name: Probe /api/version
        run: curl -sf "http://127.0.0.1:${PORT}/api/version"

      - name: Probe /api/ready (expect 200 or 503)
        run: |
          set -e
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" "http://127.0.0.1:${PORT}/api/ready")
          if [ "${WB_CHAOS_READY}" = "1" ]; then
            [ "$STATUS" = "503" ] || (echo "Expected 503, got $STATUS" && exit 1)
          else
            [ "$STATUS" = "200" ] || (echo "Expected 200, got $STATUS" && exit 1)
          fi

      - name: Stop backend
        if: always()
        run: |
          if [ -f server.pid ]; then
            kill "$(cat server.pid)" 2>/dev/null || true
          fi
