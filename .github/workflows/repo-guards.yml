name: repo-guards

permissions:
  contents: read
  pull-requests: write
  issues: write

on:
  pull_request:
  push:
    branches: [main]

jobs:
  ban-tracked-deps:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Enforce no tracked node_modules
        run: npm run guard:ban-tracked-deps
      - name: Enforce large file policy (>5MB)
        run: GUARD_MAX_FILE_BYTES=$((5 * 1024 * 1024)) npm run guard:ban-large-files
  orphan-workspaces:
    runs-on: ubuntu-latest
    needs: ban-tracked-deps
    steps:
      - uses: actions/checkout@v5
      - name: Enforce orphan workspaces guard
        shell: bash
        run: |
          set -euo pipefail
          report="$(mktemp)"
          node tools/guard/orphan-workspaces.js | tee "$report"

          if grep -q 'Orphan workspaces (not covered by root workspaces):' "$report"; then
            echo "::error::Orphan workspaces detected. Please add them to workspaces or archive them."
            exit 1
          fi

          rm -f "$report"
  size-report:
    runs-on: ubuntu-latest
    continue-on-error: true
    needs: ban-tracked-deps
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-node@v5
        with:
          node-version: 20
          cache: 'npm'
      - name: Cache SWC artifacts
        uses: actions/cache@v4
        with:
          path: node_modules/.cache/swc
          key: ${{ runner.os }}-swc-${{ hashFiles('package-lock.json') }}
      - name: Sanitize npm proxy config (legacy http-proxy)
        shell: bash
        run: scripts/ci/sanitize-npm-proxy.sh
      - name: Install dependencies
        run: npm ci
      - name: Generate repository size report
        run: npm run size:report
      - name: Evaluate size thresholds
        run: node --import tsx tools/size-thresholds.ts size-report.json
      - name: Upload size report artifact
        uses: actions/upload-artifact@v4
        with:
          name: repo-size-report
          path: size-report.json
          if-no-files-found: warn
      - name: Prepare size report body
        if: github.event_name == 'pull_request'
        id: sizereport
        uses: actions/github-script@v8
        env:
          SIZE_MAX_GB: ${{ env.SIZE_MAX_GB }}
          NODE_MODULES_MAX: ${{ env.NODE_MODULES_MAX }}
          FILES_MAX: ${{ env.FILES_MAX }}
        with:
          script: |
            const fs = require('node:fs');
            const tag = '<!-- size-report -->';
            const dataTagStart = '<!-- size-report:data ';
            const dataTagEnd = ' -->';

            const report = JSON.parse(fs.readFileSync('size-report.json','utf8'));
            const thresholds = {
              sizeMax: Number(process.env.SIZE_MAX_GB ?? 2.6),
              nodeModules: Number(process.env.NODE_MODULES_MAX ?? 220),
              files: Number(process.env.FILES_MAX ?? 150000),
            };
            const metrics = {
              repoSizeGiB: report.metrics.workingTreeBytes / 1024 ** 3,
              nodeModules: report.metrics.nodeModulesCount,
              files: report.metrics.filesCount,
            };
            const formatValue = (value, unit) => unit === 'GiB' ? `${value.toFixed(2)} ${unit}` : value.toLocaleString('en-US');
            const results = [
              { key:'repoSizeGiB', label:'Repo size', value:metrics.repoSizeGiB, threshold:thresholds.sizeMax, unit:'GiB' },
              { key:'nodeModules', label:'node_modules directories', value:metrics.nodeModules, threshold:thresholds.nodeModules, unit:'' },
              { key:'files', label:'Files', value:metrics.files, threshold:thresholds.files, unit:'' },
            ];

            let baseline = {};
            try {
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
              });
              const existing = comments.find(c => c.body && c.body.includes(tag));
              if (existing) {
                const m = existing.body.match(/<!-- size-report:data (?<json>{.+}) -->/);
                if (m?.groups?.json) baseline = JSON.parse(m.groups.json);
                core.setOutput('existing_comment_id', String(existing.id));
              }
            } catch (e) {
              core.notice(`Skipping baseline fetch: ${e.message}`);
            }

            const formatDiff = (key, unit) => {
              const prev = baseline[key];
              if (typeof prev !== 'number') return 'n/a';
              const curr = results.find(r => r.key === key).value;
              const diff = curr - prev;
              if (unit === 'GiB') return `${diff > 0 ? '+' : ''}${diff.toFixed(2)} ${unit}`;
              const rounded = Math.round(diff);
              return rounded === 0 ? '0' : `${diff > 0 ? '+' : ''}${rounded.toLocaleString('en-US')}`;
            };
            const rowStatus = (value, threshold) => value > threshold ? '⚠️ Breach' : '✅ OK';
            const tableRows = results.map(r => {
              const thr = r.unit === 'GiB' ? `${r.threshold.toFixed(2)} ${r.unit}` : r.threshold.toLocaleString('en-US');
              return `| ${r.label} | ${formatValue(r.value, r.unit)} | ${thr} | ${formatDiff(r.key, r.unit)} | ${rowStatus(r.value, r.threshold)} |`;
            }).join('\n');

            const body = `${tag}
            ### Repository size report

            | Metric | Value | Threshold | Δ vs prev | Status |
            | --- | --- | --- | --- | --- |
            ${tableRows}

            Threshold overrides: \`SIZE_MAX_GB\`, \`NODE_MODULES_MAX\`, \`FILES_MAX\`.

            ${dataTagStart}${JSON.stringify(metrics)}${dataTagEnd}`;

            core.setOutput('body', body);

            const isSameRepo = !!(context.payload.pull_request &&
                                  context.payload.pull_request.head &&
                                  context.payload.pull_request.head.repo &&
                                  context.payload.pull_request.head.repo.full_name === `${context.repo.owner}/${context.repo.repo}`);
            core.setOutput('can_comment', String(isSameRepo));

      - name: Post size report as PR comment (or fallback to summary)
        if: always()
        uses: actions/github-script@v8
        env:
          BODY: ${{ steps.sizereport.outputs.body }}
          EXISTING_ID: ${{ steps.sizereport.outputs.existing_comment_id }}
          CAN_COMMENT: ${{ steps.sizereport.outputs.can_comment }}
        with:
          script: |
            const body = process.env.BODY;
            const canComment = process.env.CAN_COMMENT === 'true';
            const existingId = process.env.EXISTING_ID;

            async function writeSummary() {
              await core.summary.addRaw(body).write();
              core.notice('Posted size report to GITHUB_STEP_SUMMARY (no comment permissions).');
            }

            if (!canComment) {
              await writeSummary();
              return;
            }

            try {
              if (existingId) {
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: Number(existingId),
                  body,
                });
                core.info('Updated existing size-report comment.');
              } else {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body,
                });
                core.info('Created new size-report comment.');
              }
            } catch (e) {
              core.warning(`Could not post PR comment (${e.status}): ${e.message}`);
              await writeSummary();
            }
