name: ga-release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.meta.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      - id: meta
        run: |
          v="${{ github.event.inputs.version }}"
          echo "version=$v" >> $GITHUB_OUTPUT
          echo "$v" > VERSION
      - name: Upload VERSION
        uses: actions/upload-artifact@v4
        with:
          name: VERSION
          path: VERSION

  backend-image:
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - uses: actions/checkout@v4
      - name: Build backend image (mock)
        run: |
          echo "FROM scratch" > Dockerfile
          echo "LABEL org.opencontainers.image.version=${{ needs.prepare.outputs.version }}" >> Dockerfile
          echo "Build placeholder - replace with actual Dockerfile"
          tar -czf backend-image-${{ needs.prepare.outputs.version }}.tar.gz Dockerfile
      - name: Upload backend artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-image
          path: backend-image-${{ needs.prepare.outputs.version }}.tar.gz

  desktop-build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    needs: prepare
    steps:
      - uses: actions/checkout@v4
      - name: Build desktop (mock bundle)
        shell: bash
        run: |
          mkdir -p dist
          echo "WorkBuoy Desktop bundle for ${{ matrix.os }} (placeholder)" > dist/README.txt
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            zip -r desktop-${{ needs.prepare.outputs.version }}-win.zip dist
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            zip -r desktop-${{ needs.prepare.outputs.version }}-mac.zip dist
          else
            tar -czf desktop-${{ needs.prepare.outputs.version }}-linux.tgz dist
          fi
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: desktop-${{ matrix.os }}
          path: |
            desktop-${{ needs.prepare.outputs.version }}-*.zip
            desktop-${{ needs.prepare.outputs.version }}-*.tgz
        if: always()

  collect-manifest:
    runs-on: ubuntu-latest
    needs: [prepare, backend-image, desktop-build]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          path: release_artifacts
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Generate manifest.json
        run: |
          node scripts/release_manifest.js release_artifacts
      - name: Attach BOM & Manifest
        uses: actions/upload-artifact@v4
        with:
          name: release-meta
          path: |
            release/manifest.json
            ops/bom/software-bom.yaml

  create-release:
    runs-on: ubuntu-latest
    needs: [prepare, collect-manifest]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          path: release_artifacts
      - name: Compose release notes
        run: |
          sed -n '1,200p' docs/RELEASE_NOTES_1.0.md > body.md
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.prepare.outputs.version }}
          name: "WorkBuoy Suite v${{ needs.prepare.outputs.version }}"
          body_path: body.md
          files: |
            release_artifacts/**/*
            ops/bom/software-bom.yaml
            release/manifest.json
