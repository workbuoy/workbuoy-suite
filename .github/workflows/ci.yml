name: ci

on:
  pull_request:
  push:
    branches: [main]

permissions:
  contents: read

jobs:
  setup:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write
    outputs:
      node_version: ${{ steps.versions.outputs.node }}
    steps:
      - uses: actions/checkout@v5
      - id: versions
        run: echo "node=20.x" >> "$GITHUB_OUTPUT"
      - uses: actions/setup-node@v5
        with:
          node-version: ${{ steps.versions.outputs.node }}
          cache: 'npm'

      - name: Cache SWC artifacts
        uses: actions/cache@v4
        with:
          path: node_modules/.cache/swc
          key: ${{ runner.os }}-swc-${{ hashFiles('package-lock.json') }}
      - name: Sanitize npm proxy config (legacy http-proxy)
        shell: bash
        run: scripts/ci/sanitize-npm-proxy.sh
      - run: npm ci

  typecheck:
    needs: setup
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-node@v5
        with:
          node-version: ${{ needs.setup.outputs.node_version }}
          cache: 'npm'

      - name: Cache SWC artifacts
        uses: actions/cache@v4
        with:
          path: node_modules/.cache/swc
          key: ${{ runner.os }}-swc-${{ hashFiles('package-lock.json') }}
      - name: Sanitize npm proxy config (legacy http-proxy)
        shell: bash
        run: scripts/ci/sanitize-npm-proxy.sh
      - run: npm ci
      - name: Generate Prisma client
        run: npm run prisma:generate
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/wb?schema=public
      - run: npm run typecheck
      - run: npm run typecheck:meta --if-present

  test:
    needs: setup
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-node@v5
        with:
          node-version: ${{ needs.setup.outputs.node_version }}
          cache: 'npm'

      - name: Cache SWC artifacts
        uses: actions/cache@v4
        with:
          path: node_modules/.cache/swc
          key: ${{ runner.os }}-swc-${{ hashFiles('package-lock.json') }}
      - name: Sanitize npm proxy config (legacy http-proxy)
        shell: bash
        run: scripts/ci/sanitize-npm-proxy.sh
      - run: npm ci
      - name: Generate Prisma client
        run: npm run prisma:generate
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/wb?schema=public
      - run: npm test -- --ci --reporters=default --reporters=jest-junit
        env:
          CI: "true"
      - name: QA a11y (frontend)
        run: npm run -w @workbuoy/frontend qa:a11y || echo "QA a11y failed" >> "$GITHUB_STEP_SUMMARY"
      - name: Contract tests (backend)
        env:
          METRICS_ENABLED: true
          WB_SKIP_OPTIONAL_ROUTES: 0
        run: npm run -w @workbuoy/backend test:contract || echo "Contract tests failed" >> "$GITHUB_STEP_SUMMARY"

  seed:
    needs: setup
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-node@v5
        with:
          node-version: ${{ needs.setup.outputs.node_version }}
          cache: 'npm'

      - name: Cache SWC artifacts
        uses: actions/cache@v4
        with:
          path: node_modules/.cache/swc
          key: ${{ runner.os }}-swc-${{ hashFiles('package-lock.json') }}
      - name: Sanitize npm proxy config (legacy http-proxy)
        shell: bash
        run: scripts/ci/sanitize-npm-proxy.sh
      - run: npm ci
      - name: Seed dry run (no DB writes)
        run: npm run seed:dry-run -w @workbuoy/backend || true
