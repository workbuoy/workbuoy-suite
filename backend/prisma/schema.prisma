generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id                String             @id @default(cuid())
  slug              String             @unique
  name              String
  users             User[]             @relation("TenantUsers")
  orgs              Organization[]
  contacts          Contact[]
  pipelines         Pipeline[]
  stages            Stage[]            @relation("TenantStages")
  opportunities     Opportunity[]      @relation("TenantOpps")
  activities        Activity[]         @relation("TenantActivities")
  customFieldDefs   CustomFieldDef[]   @relation("TenantCFDefs")
  customFieldValues CustomFieldValue[] @relation("TenantCFVals")
  roles             RoleBinding[]
  audits            AuditLog[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model User {
  id            String        @id @default(cuid())
  tenantId      String?
  tenant        Tenant?       @relation("TenantUsers", fields: [tenantId], references: [id])
  email         String        @unique
  displayName   String
  contacts      Contact[]     @relation("UserContacts")
  opportunities Opportunity[] @relation("UserOpps")
  roleBinds     RoleBinding[]
  activities    Activity[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Organization {
  id        String             @id @default(cuid())
  tenant    Tenant             @relation(fields: [tenantId], references: [id])
  tenantId  String
  name      String
  domain    String?
  contacts  Contact[]
  opps      Opportunity[]
  custom    CustomFieldValue[] @relation("OrgCF")
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  @@index([tenantId, name])
}

model Contact {
  id             String             @id @default(cuid())
  tenant         Tenant             @relation(fields: [tenantId], references: [id])
  tenantId       String
  organization   Organization?      @relation(fields: [organizationId], references: [id])
  organizationId String?
  owner          User?              @relation("UserContacts", fields: [ownerId], references: [id])
  ownerId        String?
  name           String
  email          String?
  phone          String?
  tags           String[]
  custom         CustomFieldValue[] @relation("ContactCF")
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  @@index([tenantId, ownerId])
}

model Pipeline {
  id          String        @id @default(cuid())
  tenant      Tenant        @relation(fields: [tenantId], references: [id])
  tenantId    String
  name        String
  description String?
  stages      Stage[]
  opps        Opportunity[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([tenantId, name])
}

model Stage {
  id            String        @id @default(cuid())
  tenant        Tenant        @relation("TenantStages", fields: [tenantId], references: [id])
  tenantId      String
  pipeline      Pipeline      @relation(fields: [pipelineId], references: [id])
  pipelineId    String
  name          String
  order         Int
  opportunities Opportunity[] @relation("StageOpps")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([tenantId, pipelineId, order])
}

model Opportunity {
  id             String             @id @default(cuid())
  tenant         Tenant             @relation("TenantOpps", fields: [tenantId], references: [id])
  tenantId       String
  pipeline       Pipeline           @relation(fields: [pipelineId], references: [id])
  pipelineId     String
  stage          Stage              @relation("StageOpps", fields: [stageId], references: [id])
  stageId        String
  organization   Organization?      @relation(fields: [organizationId], references: [id])
  organizationId String?
  owner          User?              @relation("UserOpps", fields: [ownerId], references: [id])
  ownerId        String?
  title          String
  valueCents     Int?
  currency       String?            @default("USD")
  status         String             @default("open") // open|won|lost
  tags           String[]
  custom         CustomFieldValue[] @relation("OppCF")
  activities     Activity[]         @relation("OppActivities")
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  @@index([tenantId, pipelineId, stageId, ownerId])
}

model Activity {
  id            String       @id @default(cuid())
  tenant        Tenant       @relation("TenantActivities", fields: [tenantId], references: [id])
  tenantId      String
  user          User?        @relation(fields: [userId], references: [id])
  userId        String?
  opportunity   Opportunity? @relation("OppActivities", fields: [opportunityId], references: [id])
  opportunityId String?
  subject       String
  note          String?
  createdAt     DateTime     @default(now())
}

model CustomFieldDef {
  id        String   @id @default(cuid())
  tenant    Tenant   @relation("TenantCFDefs", fields: [tenantId], references: [id])
  tenantId  String
  entity    String // organization|contact|opportunity
  key       String
  type      String // string|number|boolean|date|json
  required  Boolean  @default(false)
  createdAt DateTime @default(now())

  @@unique([tenantId, entity, key])
}

model CustomFieldValue {
  id             String        @id @default(cuid())
  tenant         Tenant        @relation("TenantCFVals", fields: [tenantId], references: [id])
  tenantId       String
  entity         String // organization|contact|opportunity
  entityId       String
  key            String
  stringVal      String?
  numberVal      Float?
  boolVal        Boolean?
  dateVal        DateTime?
  jsonVal        Json?
  organizationId String?
  organization   Organization? @relation("OrgCF", fields: [organizationId], references: [id])
  contactId      String?
  contact        Contact?      @relation("ContactCF", fields: [contactId], references: [id])
  opportunityId  String?
  opportunity    Opportunity?  @relation("OppCF", fields: [opportunityId], references: [id])
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@index([tenantId, entity, entityId])
}

model RoleBinding {
  id           String   @id @default(cuid())
  tenant       Tenant   @relation(fields: [tenantId], references: [id])
  tenantId     String
  user         User?    @relation(fields: [userId], references: [id])
  userId       String?
  group        String?
  role         String // admin|manager|contributor|viewer
  resourceKind String? // pipeline|record|org
  resourceId   String?
  createdAt    DateTime @default(now())

  @@index([tenantId, userId])
}

model AuditLog {
  id        String   @id @default(cuid())
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  tenantId  String
  actorId   String?
  action    String
  entity    String?
  entityId  String?
  oldJson   Json?
  newJson   Json?
  createdAt DateTime @default(now())

  @@index([tenantId, entity, entityId, createdAt])
}
