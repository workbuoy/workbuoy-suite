openapi: 3.0.3
info:
  title: WorkBuoy META API
  version: 1.0.0
  description: Introspection & platform health endpoints.
servers:
  - url: /api
tags:
  - name: meta
paths:
  /meta/health:
    get:
      operationId: getMetaHealth
      tags: [meta]
      summary: Liveness / basic health
      responses:
        '200':
          description: Health response
          content:
            application/json:
              schema: { $ref: '#/components/schemas/HealthResponse' }
      security: []   # public
  /meta/readiness:
    get:
      operationId: getMetaReadiness
      tags: [meta]
      summary: Readiness checks
      parameters:
        - in: query
          name: include
          schema:
            type: array
            items: { type: string }
          style: form
          explode: false
          description: Comma-separated list of check names to include.
      responses:
        '200':
          description: Readiness response
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ReadinessResponse' }
  /meta/version:
    get:
      operationId: getMetaVersion
      tags: [meta]
      summary: Build & version info
      responses:
        '200':
          description: Version response
          content:
            application/json:
              schema: { $ref: '#/components/schemas/VersionResponse' }
      security: []   # public
  /meta/capabilities:
    get:
      operationId: getMetaCapabilities
      tags: [meta]
      summary: Enabled modes, connectors, and feature flags
      responses:
        '200':
          description: Capabilities response
          content:
            application/json:
              schema: { $ref: '#/components/schemas/CapabilitiesResponse' }
  /meta/audit-stats:
    get:
      operationId: getMetaAuditStats
      tags: [meta]
      summary: Audit statistics over a window
      parameters:
        - in: query
          name: from
          schema: { type: string, format: date-time }
          description: ISO8601 start (inclusive). Defaults to now-1h.
        - in: query
          name: to
          schema: { type: string, format: date-time }
          description: ISO8601 end (exclusive). Defaults to now.
      responses:
        '200':
          description: Audit stats response
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AuditStatsResponse' }
  /meta/policy:
    get:
      operationId: getMetaPolicy
      tags: [meta]
      summary: Policy snapshot & deny counters
      responses:
        '200':
          description: Policy response
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PolicyResponse' }
  /meta/metrics:
    get:
      operationId: getMetaMetrics
      tags: [meta]
      summary: Prometheus metrics export for META endpoints
      responses:
        '200':
          description: Prometheus metrics or external location pointer
          content:
            text/plain:
              schema:
                type: string
                description: Prometheus exposition text.
            application/json:
              schema:
                type: object
                required: [location]
                properties:
                  location:
                    type: string
                    description: Alternate metrics endpoint location.
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    HealthResponse:
      type: object
      required: [status, uptime_s, git_sha, started_at]
      properties:
        status: { type: string, enum: [ok, degraded, down] }
        uptime_s: { type: number }
        git_sha: { type: string, minLength: 3 }
        build_id: { type: string }
        started_at: { type: string, format: date-time }
    ReadinessResponse:
      type: object
      required: [status, checks]
      properties:
        status: { type: string, enum: [ready, degraded, not_ready] }
        checks:
          type: array
          items:
            $ref: '#/components/schemas/ReadinessCheck'
    ReadinessCheck:
      type: object
      required: [name, status, latency_ms]
      properties:
        name: { type: string }
        status: { type: string, enum: [ok, fail, warn] }
        latency_ms: { type: number }
        reason: { type: string }
    VersionResponse:
      type: object
      required: [semver, git_sha, built_at]
      properties:
        semver: { type: string }
        git_sha: { type: string }
        built_at: { type: string, format: date-time }
        commit_time: { type: string, format: date-time }
    CapabilitiesResponse:
      type: object
      required: [modes, connectors, feature_flags]
      properties:
        modes:
          type: object
          required: [core, flex, secure]
          properties:
            core: { type: boolean }
            flex: { type: boolean }
            secure: { type: boolean }
        connectors:
          type: array
          items:
            type: object
            required: [name, enabled]
            properties:
              name: { type: string }
              enabled: { type: boolean }
        feature_flags:
          type: object
          additionalProperties: { type: boolean }
    PolicyResponse:
      type: object
      required: [autonomy_level, policy_profile, deny_counters]
      properties:
        autonomy_level:
          type: integer
          enum: [0, 1, 2]
        policy_profile:
          type: string
          enum: [default, secure, custom]
        deny_counters:
          type: object
          required: [last_1h, last_24h]
          properties:
            last_1h: { type: integer, minimum: 0 }
            last_24h: { type: integer, minimum: 0 }
    AuditStatsResponse:
      type: object
      required: [window, totals, top_errors]
      properties:
        window:
          type: object
          required: [from, to]
          properties:
            from: { type: string, format: date-time }
            to: { type: string, format: date-time }
        totals:
          type: object
          required: [intents, actions, failures]
          properties:
            intents: { type: integer, minimum: 0 }
            actions: { type: integer, minimum: 0 }
            failures: { type: integer, minimum: 0 }
        top_errors:
          type: array
          items:
            type: object
            required: [code, count]
            properties:
              code: { type: string }
              count: { type: integer, minimum: 0 }
security:
  - bearerAuth: []
