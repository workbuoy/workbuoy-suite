openapi: 3.0.3
info:
  title: WorkBuoy META API
  version: 0.1.1
  description: Introspection & platform health endpoints for WorkBuoy Suite.
servers:
  - url: /api
tags:
  - name: meta
    description: Platform metadata, health, and observability.
paths:
  /meta/health:
    get:
      operationId: getMetaHealth
      tags: [meta]
      summary: Liveness / basic health
      description: Returns liveness and process info. Never exposes secrets.
      responses:
        '200':
          description: Health response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
              examples:
                ok:
                  value:
                    status: ok
                    uptime_s: 123.4
                    git_sha: "abc123def456"
                    build_id: "build-2025-09-16.1"
                    started_at: "2025-09-16T08:12:33.123Z"
      security: []   # public
  /meta/readiness:
    get:
      operationId: getMetaReadiness
      tags: [meta]
      summary: Readiness checks
      description: Aggregates DB, queue, outbound integrations. HTTP 200 always; use `status` field.
      parameters:
        - in: query
          name: include
          schema:
            type: array
            items: { type: string }
          style: form
          explode: true
          description: Optional list of check names to include.
      responses:
        '200':
          description: Readiness response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadinessResponse'
  /meta/version:
    get:
      operationId: getMetaVersion
      tags: [meta]
      summary: Build & version info
      description: Returns build semver, git commit, and timestamps.
      responses:
        '200':
          description: Version response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionResponse'
      security: []   # public
  /meta/capabilities:
    get:
      operationId: getMetaCapabilities
      tags: [meta]
      summary: Enabled modes, connectors, and feature flags
      description: Returns current modes, connectors and feature flags (no secrets).
      responses:
        '200':
          description: Capabilities response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CapabilitiesResponse'
  /meta/policy:
    get:
      operationId: getMetaPolicy
      tags: [meta]
      summary: Policy snapshot & counters
      description: Returns autonomy level, profile, and last-hour/day deny counters.
      responses:
        '200':
          description: Policy response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyResponse'
  /meta/audit-stats:
    get:
      operationId: getMetaAuditStats
      tags: [meta]
      summary: Audit statistics over a window
      description: Windowed totals and top error codes.
      parameters:
        - in: query
          name: from
          schema: { type: string, format: date-time }
          description: ISO8601 start (inclusive). Defaults to now-1h.
        - in: query
          name: to
          schema: { type: string, format: date-time }
          description: ISO8601 end (exclusive). Defaults to now.
      responses:
        '200':
          description: Audit stats response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditStatsResponse'
  /meta/metrics:
    get:
      operationId: getMetaMetrics
      tags: [meta]
      summary: Prometheus metrics or link
      description: Returns text/plain Prometheus exposition **or** a JSON object with `location` pointing to a mounted `/metrics`.
      responses:
        '200':
          description: Prometheus metrics or link
          content:
            text/plain:
              schema:
                type: string
                description: Prometheus exposition format
            application/json:
              schema:
                $ref: '#/components/schemas/MetricsLink'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    HealthResponse:
      type: object
      required: [status, uptime_s, git_sha, started_at]
      properties:
        status:
          type: string
          enum: [ok, degraded, down]
        uptime_s:
          type: number
          format: float
          minimum: 0
        git_sha:
          type: string
          minLength: 7
        build_id:
          type: string
        started_at:
          type: string
          format: date-time
    ReadinessResponse:
      type: object
      required: [status, checks]
      properties:
        status:
          type: string
          enum: [ready, degraded, not_ready]
        checks:
          type: array
          items:
            $ref: '#/components/schemas/ReadinessCheck'
    ReadinessCheck:
      type: object
      required: [name, status, latency_ms]
      properties:
        name: { type: string }
        status:
          type: string
          enum: [ok, fail, warn]
        latency_ms:
          type: number
          format: float
          minimum: 0
        reason:
          type: string
    VersionResponse:
      type: object
      required: [semver, git_sha, built_at]
      properties:
        semver:
          type: string
          pattern: '^\d+\.\d+\.\d+(-[\w\.\+]+)?$'
        git_sha:
          type: string
          minLength: 7
        built_at:
          type: string
          format: date-time
        commit_time:
          type: string
          format: date-time
    CapabilitiesResponse:
      type: object
      required: [modes, connectors, feature_flags]
      properties:
        modes:
          type: object
          required: [core, flex, secure]
          properties:
            core: { type: boolean }
            flex: { type: boolean }
            secure: { type: boolean }
        connectors:
          type: array
          items:
            type: object
            required: [name, enabled]
            properties:
              name: { type: string }
              enabled: { type: boolean }
        feature_flags:
          type: object
          additionalProperties:
            type: boolean
    PolicyResponse:
      type: object
      required: [autonomy_level, policy_profile, deny_counters]
      properties:
        autonomy_level:
          type: integer
          enum: [0, 1, 2]
        policy_profile:
          type: string
          enum: [default, secure, custom]
        deny_counters:
          type: object
          required: [last_1h, last_24h]
          properties:
            last_1h: { type: integer, minimum: 0 }
            last_24h: { type: integer, minimum: 0 }
    AuditStatsResponse:
      type: object
      required: [window, totals, top_errors]
      properties:
        window:
          type: object
          required: [from, to]
          properties:
            from: { type: string, format: date-time }
            to: { type: string, format: date-time }
        totals:
          type: object
          required: [intents, actions, failures]
          properties:
            intents: { type: integer, minimum: 0 }
            actions: { type: integer, minimum: 0 }
            failures: { type: integer, minimum: 0 }
        top_errors:
          type: array
          items:
            type: object
            required: [code, count]
            properties:
              code: { type: string }
              count: { type: integer, minimum: 0 }
    MetricsLink:
      type: object
      required: [location]
      properties:
        location:
          type: string
          description: Absolute or relative URL to the metrics endpoint.
security:
  - bearerAuth: []
