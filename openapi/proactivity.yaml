openapi: 3.0.3
info:
  title: Workbuoy Proactivity API
  version: 0.1.0
servers:
  - url: https://api.workbuoy.local
paths:
  /api/proactivity/state:
    get:
      summary: Get proactivity state for current tenant/user
      parameters:
        - in: header
          name: x-tenant
          schema: { type: string }
        - in: header
          name: x-user
          schema: { type: string }
        - in: header
          name: x-role
          schema: { type: string }
        - in: header
          name: x-proactivity
          schema:
            type: string
            description: Desired mode (numeric 1-6 or keyword)
        - in: header
          name: x-proactivity-compat
          schema:
            type: string
            description: Legacy mode (0-3) mapped to 1-6
      responses:
        '200':
          description: Current proactivity posture
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProactivityState'
    post:
      summary: Request a new proactivity mode
      parameters:
        - in: header
          name: x-tenant
          schema: { type: string }
        - in: header
          name: x-user
          schema: { type: string }
        - in: header
          name: x-role
          schema: { type: string }
        - in: header
          name: x-proactivity-compat
          schema:
            type: string
            description: Legacy mode (0-3) mapped to 1-6
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                requestedMode:
                  type: string
                  description: Desired mode (number or keyword)
                featureId:
                  type: string
      responses:
        '200':
          description: Resolved proactivity state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProactivityState'
  /api/admin/subscription:
    get:
      summary: Get subscription configuration for tenant
      parameters:
        - in: header
          name: x-tenant
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Subscription state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionState'
    put:
      summary: Update subscription configuration
      parameters:
        - in: header
          name: x-tenant
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                plan:
                  type: string
                  enum: [flex, secure, enterprise]
                killSwitch:
                  type: boolean
                secureTenant:
                  type: boolean
                maxOverride:
                  type: string
                  description: Optional numeric mode override
      responses:
        '200':
          description: Updated subscription state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionState'
  /api/features/active:
    get:
      summary: List active features ranked for the current user
      parameters:
        - in: header
          name: x-tenant
          required: true
          schema: { type: string }
        - in: header
          name: x-user
          required: true
          schema: { type: string }
        - in: header
          name: x-role
          required: true
          schema: { type: string }
        - in: header
          name: x-industry
          schema: { type: string }
      responses:
        '200':
          description: Ranked feature list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActiveFeature'
  /api/usage/feature:
    post:
      summary: Record a feature usage event
      parameters:
        - in: header
          name: x-tenant
          required: false
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsageEvent'
      responses:
        '200':
          description: Event recorded
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
  /api/usage/aggregate/{userId}:
    get:
      summary: Aggregate usage counts for a user
      parameters:
        - in: path
          name: userId
          required: true
          schema: { type: string }
        - in: header
          name: x-tenant
          schema: { type: string }
      responses:
        '200':
          description: Aggregated counts
          content:
            application/json:
              schema:
                type: object
                additionalProperties: { type: integer }
  /api/admin/roles/import:
    post:
      summary: Import roles.json into Postgres
      parameters:
        - in: header
          name: x-role-id
          required: true
          schema: { type: string, enum: [admin] }
      responses:
        '200':
          description: Import summary
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  imported:
                    type: object
                    properties:
                      roles: { type: integer }
                      features: { type: integer }
  /api/admin/roles/{roleId}:
    get:
      summary: Inspect role caps for a tenant
      parameters:
        - in: path
          name: roleId
          required: true
          schema: { type: string }
        - in: header
          name: x-role-id
          required: true
          schema: { type: string, enum: [admin] }
        - in: header
          name: x-tenant
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Effective caps
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleInspection'
    put:
      summary: Set tenant-specific role overrides
      parameters:
        - in: path
          name: roleId
          required: true
          schema: { type: string }
        - in: header
          name: x-role-id
          required: true
          schema: { type: string, enum: [admin] }
        - in: header
          name: x-tenant
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleOverrideRequest'
      responses:
        '200':
          description: Updated override
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleInspection'
  /api/explain/last:
    get:
      summary: Fetch recent proactivity events for explainability UI
      responses:
        '200':
          description: Recent events
          content:
            application/json:
              schema:
                type: object
                properties:
                  events:
                    type: array
                    items:
                      $ref: '#/components/schemas/TelemetryEvent'
  /api/proposals:
    get:
      summary: List proposals for the tenant
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum: [proposed, approved, rejected, executed, failed]
          description: Filter by proposal status
      responses:
        '200':
          description: List of proposals
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProposalListResponse'
    post:
      summary: Manually create a proposal (usually generated via runner)
      parameters:
        - in: header
          name: Idempotency-Key
          schema: { type: string }
          description: Optional idempotency key for the proposal record
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProposalCreateRequest'
      responses:
        '201':
          description: Proposal created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProposalCreateResponse'
        '400':
          description: Missing capability id
  /api/proposals/{id}/approve:
    post:
      summary: Approve a proposal and execute the underlying capability
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
        - in: header
          name: Idempotency-Key
          schema: { type: string }
          description: Override idempotency key for connector execution
      responses:
        '200':
          description: Proposal executed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProposalApproveResponse'
        '404':
          description: Proposal or capability not found
        '409':
          description: Proposal already rejected or executed
        '500':
          description: Execution failed
  /api/proposals/{id}/reject:
    post:
      summary: Reject a proposal without executing it
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProposalRejectRequest'
      responses:
        '200':
          description: Proposal rejected
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProposalRejectResponse'
        '404':
          description: Proposal not found
        '409':
          description: Proposal already executed
  /api/connectors/{name}/health:
    get:
      summary: Retrieve circuit breaker state for a connector
      parameters:
        - in: path
          name: name
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Circuit breaker state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorHealth'
        '404':
          description: Connector unknown
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorHealth'
  /api/connectors/health:
    get:
      summary: List health for all known connector breakers
      responses:
        '200':
          description: Aggregate circuit breaker states
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorHealthList'
components:
  schemas:
    ProactivityState:
      type: object
      properties:
        tenantId: { type: string }
        requested: { type: integer, minimum: 1, maximum: 6 }
        requestedKey: { type: string }
        effective: { type: integer, minimum: 1, maximum: 6 }
        effectiveKey: { type: string }
        basis:
          type: array
          items: { type: string }
        caps:
          type: array
          items:
            type: object
            properties:
              id: { type: string }
              label: { type: string }
              mode: { type: integer, minimum: 1, maximum: 6 }
              enforced: { type: boolean, nullable: true }
              basis:
                type: array
                items: { type: string }
                nullable: true
              degradeTag: { type: string, nullable: true }
        degradeRail:
          type: array
          items: { type: integer, minimum: 1, maximum: 6 }
        uiHints:
          type: object
          properties:
            surface:
              type: string
              enum: [none, passive, cards, draft, backstage, dom-overlay]
            overlay: { type: boolean }
            callToAction: { type: string }
            banner: { type: string }
            healthChecks: { type: boolean }
            reviewType:
              type: string
              enum: [none, passive, suggestion, approval, execution]
        chip:
          type: object
          properties:
            key: { type: string }
            label: { type: string }
            icon: { type: string }
        subscription:
          $ref: '#/components/schemas/SubscriptionState'
        featureId: { type: string, nullable: true }
        timestamp: { type: string, format: date-time }
    Proposal:
      type: object
      properties:
        id: { type: string }
        tenantId: { type: string }
        userId: { type: string }
        featureId: { type: string, nullable: true }
        capabilityId: { type: string }
        status: { type: string, enum: [proposed, approved, rejected, executed, failed] }
        preview:
          type: object
          nullable: true
          additionalProperties: true
        basis:
          type: array
          items: { type: string }
        idempotencyKey: { type: string, nullable: true }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
        approvedBy: { type: string, nullable: true }
        rejectedBy: { type: string, nullable: true }
        requestedMode: { type: integer, nullable: true }
        effectiveMode: { type: integer, nullable: true }
        executionResult:
          type: object
          nullable: true
          additionalProperties: true
        failureReason: { type: string, nullable: true }
    ProposalCreateRequest:
      type: object
      required: [capabilityId]
      properties:
        capabilityId: { type: string }
        featureId: { type: string }
        payload:
          type: object
          additionalProperties: true
        preview:
          type: object
          nullable: true
          additionalProperties: true
    ProposalCreateResponse:
      type: object
      properties:
        proposal:
          $ref: '#/components/schemas/Proposal'
    ProposalListResponse:
      type: object
      properties:
        proposals:
          type: array
          items:
            $ref: '#/components/schemas/Proposal'
    ProposalApproveResponse:
      type: object
      properties:
        proposal:
          $ref: '#/components/schemas/Proposal'
        outcome:
          type: object
          nullable: true
          additionalProperties: true
        idempotencyKey: { type: string }
        basis:
          type: array
          items: { type: string }
    ProposalRejectRequest:
      type: object
      properties:
        reason: { type: string }
    ProposalRejectResponse:
      type: object
      properties:
        proposal:
          $ref: '#/components/schemas/Proposal'
    ConnectorHealth:
      type: object
      properties:
        connector: { type: string }
        state: { type: string, enum: [open, half-open, closed, unknown] }
    ConnectorHealthList:
      type: object
      properties:
        connectors:
          type: array
          items:
            $ref: '#/components/schemas/ConnectorHealth'
    SubscriptionState:
      type: object
      properties:
        tenantId: { type: string }
        plan: { type: string, enum: [flex, secure, enterprise] }
        killSwitch: { type: boolean }
        secureTenant: { type: boolean }
        maxMode: { type: integer, minimum: 1, maximum: 6 }
        maxOverride: { type: integer, nullable: true }
    TelemetryEvent:
      type: object
      properties:
        ts: { type: integer, format: int64 }
        tenantId: { type: string }
        userId: { type: string, nullable: true }
        requested: { type: integer, minimum: 1, maximum: 6 }
        requestedKey: { type: string }
        effective: { type: integer, minimum: 1, maximum: 6 }
        effectiveKey: { type: string }
        basis:
          type: array
          items: { type: string }
        source: { type: string, nullable: true }
    ActiveFeature:
      type: object
      properties:
        id: { type: string }
        title: { type: string }
        description: { type: string }
        autonomyCap: { type: integer, minimum: 0, maximum: 6 }
        score: { type: number }
        rankBasis:
          type: object
          properties:
            autonomyCap: { type: integer }
            usage: { type: integer }
            usageWeight: { type: number }
            industryBoost: { type: number }
    UsageEvent:
      type: object
      required: [userId, featureId, action]
      properties:
        userId: { type: string }
        tenantId: { type: string }
        featureId: { type: string }
        action: { type: string, enum: [open, complete, dismiss] }
        ts: { type: string, format: date-time }
    RoleOverrideRequest:
      type: object
      properties:
        featureCaps:
          type: object
          additionalProperties: { type: integer, minimum: 0, maximum: 6 }
        disabledFeatures:
          type: array
          items: { type: string }
    RoleInspection:
      type: object
      properties:
        tenantId: { type: string }
        roleId: { type: string }
        override:
          $ref: '#/components/schemas/RoleOverrideRequest'
        effective:
          type: object
          properties:
            rolesResolved:
              type: array
              items:
                type: object
                properties:
                  role_id: { type: string }
                  title: { type: string }
            featureCaps:
              type: object
              additionalProperties: { type: integer }
            features:
              type: array
              items:
                $ref: '#/components/schemas/ActiveFeature'
