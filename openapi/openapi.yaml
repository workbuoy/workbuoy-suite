openapi: 3.0.3
info:
  title: Workbuoy Suite - MVP APIs
  version: 0.3.1
servers:
  - url: http://localhost:3000
paths:
  /api/crm/contacts:
    get:
      summary: List contacts
      operationId: listContacts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items: { $ref: '#/components/schemas/Contact' }
                  correlationId: { type: string }
                  explanation: { $ref: '#/components/schemas/Explanation' }
    post:
      summary: Create contact
      operationId: createContact
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/NewContact' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  item: { $ref: '#/components/schemas/Contact' }
                  correlationId: { type: string }
                  explanation: { $ref: '#/components/schemas/Explanation' }
        '400': { $ref: '#/components/responses/BadRequest' }
        '403': { $ref: '#/components/responses/Forbidden' }

  /api/crm/contacts/{id}:
    delete:
      summary: Delete contact
      operationId: deleteContact
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '204': { description: Deleted }
        '404': { $ref: '#/components/responses/NotFound' }
        '403': { $ref: '#/components/responses/Forbidden' }

  /api/tasks:
    get:
      summary: List tasks
      operationId: listTasks
      parameters:
        - in: query
          name: status
          schema: { type: string, enum: [todo, doing, done] }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items: { $ref: '#/components/schemas/Task' }
                  correlationId: { type: string }
                  explanation: { $ref: '#/components/schemas/Explanation' }
    post:
      summary: Create task
      operationId: createTask
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/NewTask' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  item: { $ref: '#/components/schemas/Task' }
                  correlationId: { type: string }
                  explanation: { $ref: '#/components/schemas/Explanation' }
        '400': { $ref: '#/components/responses/BadRequest' }
        '403': { $ref: '#/components/responses/Forbidden' }

  /api/tasks/{id}:
    patch:
      summary: Update task
      operationId: updateTask
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/TaskPatch' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  item: { $ref: '#/components/schemas/Task' }
                  correlationId: { type: string }
                  explanation: { $ref: '#/components/schemas/Explanation' }
        '400': { $ref: '#/components/responses/BadRequest' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
    delete:
      summary: Delete task
      operationId: deleteTask
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '204': { description: Deleted }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }

  /api/log:
    get:
      summary: List logs
      operationId: listLogs
      parameters:
        - in: query
          name: level
          schema: { type: string, enum: [info, warn, error] }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items: { $ref: '#/components/schemas/LogEntry' }
                  correlationId: { type: string }
                  explanation: { $ref: '#/components/schemas/Explanation' }
    post:
      summary: Append log
      operationId: appendLog
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/LogAppend' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  item: { $ref: '#/components/schemas/LogEntry' }
                  correlationId: { type: string }
                  explanation: { $ref: '#/components/schemas/Explanation' }
        '400': { $ref: '#/components/responses/BadRequest' }
        '403': { $ref: '#/components/responses/Forbidden' }

components:
  schemas:
    Explanation:
      type: object
      properties:
        mode: { type: string, enum: [ask_approval, read_only, supervised] }
        reason: { type: string }
        confidence: { type: number }
        impact: { type: string }
        alternatives:
          type: array
          items: { type: string }

    Contact:
      type: object
      required: [id, name]
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        email: { type: string, format: email }
        phone: { type: string }

    NewContact:
      type: object
      required: [name]
      properties:
        name: { type: string }
        email: { type: string, format: email }
        phone: { type: string }

    Task:
      type: object
      required: [id, title, status]
      properties:
        id: { type: string, format: uuid }
        title: { type: string }
        status: { type: string, enum: [todo, doing, done], default: todo }
        dueAt: { type: string, format: date-time }
        assignee: { type: string }

    NewTask:
      type: object
      required: [title]
      properties:
        title: { type: string }
        status: { type: string, enum: [todo, doing, done] }
        dueAt: { type: string, format: date-time }
        assignee: { type: string }

    TaskPatch:
      type: object
      properties:
        title: { type: string }
        status: { type: string, enum: [todo, doing, done] }
        dueAt: { type: string, format: date-time }
        assignee: { type: string }

    LogEntry:
      type: object
      required: [ts, level, msg]
      properties:
        ts: { type: string, format: date-time }
        level: { type: string, enum: [info, warn, error] }
        msg: { type: string }
        meta: { type: object }
        hash: { type: string }
        prevHash: { type: string }

    LogAppend:
      type: object
      required: [msg]
      properties:
        level: { type: string, enum: [info, warn, error], default: info }
        msg: { type: string }
        meta: { type: object }

  responses:
    BadRequest:
      description: Invalid payload
    Forbidden:
      description: Policy denied
    NotFound:
      description: Not found
