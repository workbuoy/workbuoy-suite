generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum FeatureUsageAction {
  open
  complete
  dismiss
}

model Contact {
  id        String   @id @default(uuid())
  name      String
  email     String?  @unique
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id        String   @id @default(uuid())
  title     String
  status    String   @default("todo")
  dueAt     DateTime?
  assignee  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status])
}

model LogEntry {
  id        String   @id @default(uuid())
  ts        DateTime @default(now())
  level     String
  msg       String
  meta      Json?
  hash      String
  prevHash  String?
}

model AuditChain {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  headHash  String?
}

model Role {
  roleId       String   @id
  title        String
  inherits     String[] @default([])
  featureCaps  Json?
  scopeHints   Json?
  metadata     Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([title])
}

model Feature {
  id                  String   @id
  title               String
  description         String?
  defaultAutonomyCap  Int      @default(3)
  capabilities        String[] @default([])
  metadata            Json?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model OrgRoleOverride {
  tenantId         String
  roleId           String
  featureCaps      Json?
  disabledFeatures String[] @default([])
  notes            String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@id([tenantId, roleId])
  @@index([tenantId])
}

model UserRole {
  userId          String   @id
  primaryRole     String
  secondaryRoles  String[] @default([])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([primaryRole])
}

model FeatureUsage {
  id        String              @id @default(uuid())
  tenantId  String?
  userId    String
  featureId String
  action    FeatureUsageAction
  ts        DateTime            @default(now())
  metadata  Json?
  createdAt DateTime            @default(now())

  @@index([userId])
  @@index([featureId])
  @@index([tenantId, userId])
}

model SubscriptionSetting {
  tenantId     String   @id
  plan         String   @default("flex")
  killSwitch   Boolean  @default(false)
  secureTenant Boolean  @default(false)
  maxOverride  Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
